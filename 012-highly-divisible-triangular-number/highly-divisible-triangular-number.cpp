/*
* The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle
* number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
* 
* 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
* 
* Let us list the factors of the first seven triangle numbers:
* 
* 1: 1
* 3: 1, 3
* 6: 1, 2, 3, 6
* 10: 1, 2, 5, 10
* 15: 1, 3, 5, 15
* 21: 1, 2, 4, 7, 14, 28
* 
* We can see that 28 is the first triangle number to have over five divisors.
* 
* What is the value of the first triangle number to have over five hundred divisors?
*
* Author: Clifton Roberts
* Date: 30 November 2016
*/

#include <iostream>
#include <math.h>
#include <string>
#include <windows.h>

using namespace std;

LPCSTR getNextIndicator(LPCSTR);

int main()
{
	DWORD dw;
	COORD write_head;
	HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
	if (hStdOut == INVALID_HANDLE_VALUE)
	{
		cout << "ERROR: Invalid handle." << endl;
		cin.get();
		return 1;
	}

	write_head.X = 0;
	write_head.Y = 3;
	SetConsoleCursorPosition(hStdOut, write_head);

	write_head.Y = 0;
	LPCSTR indicator = "|";
	WriteConsoleOutputCharacter(hStdOut, "Calculating... |", 16, write_head, &dw);
	write_head.Y = 1;
	WriteConsoleOutputCharacter(hStdOut, "Triangle Number: 1", 18, write_head, &dw);
	write_head.Y = 2;
	WriteConsoleOutputCharacter(hStdOut, "Most divisors so far: 0", 23, write_head, &dw);

	int numberOfDivisors = 0;
	int mostDivisors = 0;
	unsigned long long triangleNo = 1;
	unsigned long long n = 1;
	unsigned long long actions = 0;

	while (numberOfDivisors < 500)
	{
		numberOfDivisors = 0;
		triangleNo = (n * (n + 1)) / 2;

		string triangleNoStr = to_string(triangleNo);
		LPCSTR triangleNoCStr = triangleNoStr.c_str();

		write_head.X = 17;
		write_head.Y = 1;
		WriteConsoleOutputCharacter(hStdOut, triangleNoCStr, strlen(triangleNoCStr), write_head, &dw);

		for (unsigned long long i = 1; i <= triangleNo; i++)
		{
			actions++;

			if (actions % 2000000 == 0)
			{
				write_head.X = 15;
				write_head.Y = 0;
				indicator = getNextIndicator(indicator);
				WriteConsoleOutputCharacter(hStdOut, indicator, 1, write_head, &dw);
			}

			if (triangleNo % i == 0)
			{
				numberOfDivisors++;
			}
		}

		n++;

		if (numberOfDivisors > mostDivisors)
		{
			mostDivisors = numberOfDivisors;

			string mostDivisorsStr = to_string(mostDivisors);
			LPCSTR mostDivisorsCStr = mostDivisorsStr.c_str();

			write_head.X = 22;
			write_head.Y = 2;
			WriteConsoleOutputCharacter(hStdOut, mostDivisorsCStr, strlen(mostDivisorsCStr), write_head, &dw);
		}
	}

	write_head.X = 15;
	write_head.Y = 0;
	WriteConsoleOutputCharacter(hStdOut, "done.", 5, write_head, &dw);
	cout << triangleNo << endl;

	cin.get();
	return 0;
}

LPCSTR getNextIndicator(LPCSTR indicator)
{
	if (indicator == "|")
	{
		return "/";
	}
	else if (indicator == "/")
	{
		return "-";
	}
	else if (indicator == "-")
	{
		return "\\";
	}
	else if (indicator == "\\")
	{
		return "|";
	}
}
